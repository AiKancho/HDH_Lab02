diff --git a/Makefile b/Makefile
index 74e454f..4515355 100644
--- a/Makefile
+++ b/Makefile
@@ -194,9 +194,8 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
-
-
-
+	$U/_trace\
+	$U/_sysinfotest\
 
 ifeq ($(LAB),syscall)
 UPROGS += \
diff --git a/kernel/kalloc.c b/kernel/kalloc.c
index 5247b91..2ffb876 100644
--- a/kernel/kalloc.c
+++ b/kernel/kalloc.c
@@ -91,3 +91,18 @@ kalloc(void)
   return (void*)r;
 }
 
+uint64
+get_freemem(void) {
+    struct run *r;
+    uint64 free_mem = 0;
+
+    acquire(&kmem.lock);
+    r = kmem.freelist;
+    while (r) {
+        free_mem += PGSIZE;
+        r = r->next;
+    }
+    release(&kmem.lock);
+
+    return free_mem;
+}
diff --git a/kernel/proc.c b/kernel/proc.c
index 130d9ce..60cd5d8 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -310,6 +310,8 @@ fork(void)
 
   safestrcpy(np->name, p->name, sizeof(p->name));
 
+  np->trace_mask = p->trace_mask; // copy trace mask to child
+
   pid = np->pid;
 
   release(&np->lock);
@@ -693,3 +695,17 @@ procdump(void)
     printf("\n");
   }
 }
+
+uint64
+get_nproc(void) {
+    struct proc *p;
+    int count = 0;
+
+    for (p = proc; p < &proc[NPROC]; p++) {
+        acquire(&p->lock);
+        if (p->state != UNUSED)
+            count++;
+        release(&p->lock);
+    }
+    return count;
+}
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..b1671d5 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -91,7 +91,7 @@ struct proc {
   int killed;                  // If non-zero, have been killed
   int xstate;                  // Exit status to be returned to parent's wait
   int pid;                     // Process ID
-
+  int trace_mask;              // Trace mask
   // wait_lock must be held when using this:
   struct proc *parent;         // Parent process
 
@@ -105,3 +105,6 @@ struct proc {
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
 };
+
+uint64 get_freemem(void);
+uint64 get_nproc(void);
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..51867ec 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -7,6 +7,32 @@
 #include "syscall.h"
 #include "defs.h"
 
+static char *syscall_names[] = {
+  [SYS_fork]    "fork",
+  [SYS_exit]    "exit",
+  [SYS_wait]    "wait",
+  [SYS_pipe]    "pipe",
+  [SYS_read]    "read",
+  [SYS_kill]    "kill",
+  [SYS_exec]    "exec",
+  [SYS_fstat]   "fstat",
+  [SYS_chdir]   "chdir",
+  [SYS_dup]     "dup",
+  [SYS_getpid]  "getpid",
+  [SYS_sbrk]    "sbrk",
+  [SYS_sleep]   "sleep",
+  [SYS_uptime]  "uptime",
+  [SYS_open]    "open",
+  [SYS_write]   "write",
+  [SYS_mknod]   "mknod",
+  [SYS_unlink]  "unlink",
+  [SYS_link]    "link",
+  [SYS_mkdir]   "mkdir",
+  [SYS_close]   "close",
+  [SYS_trace]   "trace",
+  [SYS_sysinfo] "sysinfo",
+};
+
 // Fetch the uint64 at addr from the current process.
 int
 fetchaddr(uint64 addr, uint64 *ip)
@@ -101,6 +127,8 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_trace(void);
+extern uint64 sys_sysinfo(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,6 +154,8 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_trace] sys_trace,
+[SYS_sysinfo] sys_sysinfo,
 };
 
 void
@@ -136,12 +166,12 @@ syscall(void)
 
   num = p->trapframe->a7;
   if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
-    // Use num to lookup the system call function for num, call it,
-    // and store its return value in p->trapframe->a0
     p->trapframe->a0 = syscalls[num]();
+    if(p->trace_mask & (1 << num)) {
+      printf("%d: syscall %s -> %ld\n", p->pid, syscall_names[num], p->trapframe->a0);
+    }
   } else {
-    printf("%d %s: unknown sys call %d\n",
-            p->pid, p->name, num);
+    printf("%d %s: unknown sys call %d\n", p->pid, p->name, num);
     p->trapframe->a0 = -1;
   }
 }
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..23ec55d 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,5 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_trace 22
+#define SYS_sysinfo 23
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 3b4d5bd..92be145 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -5,6 +5,8 @@
 #include "memlayout.h"
 #include "spinlock.h"
 #include "proc.h"
+#include "sysinfo.h"
+#include "syscall.h"
 
 uint64
 sys_exit(void)
@@ -91,3 +93,34 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+uint64
+sys_trace(void)
+{
+  int mask;
+  if(argint(0, &mask), mask < 0)
+    return -1;
+  myproc()->trace_mask = mask;
+  return 0;
+}
+
+uint64
+sys_sysinfo(void) {
+    uint64 addr;
+    struct sysinfo info;
+
+    argaddr(0, &addr);
+
+    if (addr == 0) {
+        return -1;
+    }
+
+    info.freemem = get_freemem();
+    info.nproc = get_nproc();
+
+    if (copyout(myproc()->pagetable, addr, (char *)&info, sizeof(info)) < 0) {
+        return -1;
+    }
+
+    return 0;
+}
diff --git a/user/user.h b/user/user.h
index f16fe27..d216a10 100644
--- a/user/user.h
+++ b/user/user.h
@@ -1,4 +1,5 @@
 struct stat;
+struct sysinfo;
 
 // system calls
 int fork(void);
@@ -22,6 +23,8 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int trace(int mask);
+int sysinfo(struct sysinfo *);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..bc109fd 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,5 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("trace");
+entry("sysinfo");
